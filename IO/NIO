Channel（通道）
    可类比为传统IO中的Stream
    区别是：
        传统IO中，Stream是单向的，比如InputStream只能进行读取操作，OutputStream只能进行写操作。
        而Channel是双向的，既可用来进行读操作，又可用来进行写操作。

    常用的几种通道：
        FileChannel
        SocketChanel
        ServerSocketChannel
        DatagramChannel

Buffer（缓冲区）
    传统IO中，数据读写可以放在byte[]中。
    NIO中，数据读写都只能放在Buffer中。
    常用的Buffer的子类有：
        ByteBuffer
        IntBuffer
        CharBuffer
        LongBuffer
        DoubleBuffer
        FloatBuffer
        ShortBuffer

Selector（选择器）
    轮询每个注册的Channel，一旦发现Channel有注册的事件发生，便获取事件然后进行处理。
    用一个单线程就可以管理多个通道，也就是管理多个连接。
    这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，并且避免了多线程之间的上下文切换导致的开销。
    与Selector有关的一个关键类是SelectionKey，一个SelectionKey表示一个到达的事件，这2个类构成了服务端处理业务的关键逻辑。

