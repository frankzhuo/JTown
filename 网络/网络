GET 和 POST 的区别：
    GET 请求可被缓存
    GET 请求保留在浏览器历史记录中
    GET 请求可被收藏为书签
    GET 请求不应在处理敏感数据时使用
    GET 请求有长度限制
    GET 请求只应当用于取回数据

    POST 请求不会被缓存
    POST 请求不会保留在浏览器历史记录中
    POST 不能被收藏为书签
    POST 请求对数据长度没有要求

dns使用的协议
    既使用TCP又使用UDP
    首先了解一下TCP与UDP传送字节的长度限制：
    UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。当DNS查询超过512字节时，协议的TC标志出现删除标志，这时则使用TCP发送。通常传统的UDP报文一般不会大于512字节。
    区域传送时使用TCP，主要有一下两点考虑：
    辅域名服务器会定时（一般时3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送，进行数据同步。区域传送将使用TCP而不是UDP，因为数据同步传送的数据量比一个请求和应答的数据量要多得多。
    TCP是一种可靠的连接，保证了数据的准确性。
    域名解析时使用UDP协议：
    客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。虽然从理论上说，客户端也可以指定向DNS服务器查询的时候使用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。

TCP粘包和拆包产生的原因
    应用程序写入数据的字节大小大于套接字发送缓冲区的大小
    进行MSS大小的TCP分段。MSS是最大报文段长度的缩写。MSS是TCP报文段中的数据字段的最大长度。数据字段加上TCP首部才等于整个的TCP报文段。所以MSS并不是TCP报文段的最大长度，而是：MSS=TCP报文段长度-TCP首部长度
    以太网的payload大于MTU进行IP分片。MTU指：一种通信协议的某一层上面所能通过的最大数据包大小。如果IP层有一个数据包要传，而且数据的长度比链路层的MTU大，那么IP层就会进行分片，把数据包分成托干片，让每一片都不超过MTU。注意，IP分片可以发生在原始发送端主机上，也可以发生在中间路由器上。

TCP粘包和拆包的解决策略
    消息定长。例如100字节。
    在包尾部增加回车或者空格符等特殊字符进行分割，典型的如FTP协议
    将消息分为消息头和消息尾。
    其它复杂的协议，如RTMP协议等。

三次握手
    第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
    第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
    第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
    完成三次握手，客户端与服务器开始传送数据    

四次挥手
    客户端先发送FIN，进入FIN_WAIT1状态
    服务端收到FIN，发送ACK，进入CLOSE_WAIT状态，客户端收到这个ACK，进入FIN_WAIT2状态
    服务端发送FIN，进入LAST_ACK状态
    客户端收到FIN，发送ACK，进入TIME_WAIT状态，服务端收到ACK，进入CLOSE状态

TIME_WAIT的状态就是主动断开的一方（这里是客户端），发送完最后一次ACK之后进入的状态，并且持续时间还挺长的。
客户端TIME_WAIT持续2倍MSL时长，在linux体系中大概是60s，转换成CLOSE状态

TIME_WAIT
    TIME_WAIT 是主动关闭链接时形成的，等待2MSL时间，约4分钟。主要是防止最后一个ACK丢失。
    由于TIME_WAIT 的时间会非常长，因此server端应尽量减少主动关闭连接

CLOSE_WAIT
    CLOSE_WAIT是被动关闭连接是形成的。
    根据TCP状态机，服务器端收到客户端发送的FIN，则按照TCP实现发送ACK，因此进入CLOSE_WAIT状态
    但如果服务器端不执行close()，就不能由CLOSE_WAIT迁移到LAST_ACK，则系统中会存在很多CLOSE_WAIT状态的连接。
    此时，可能是系统忙于处理读、写操作，而未将已收到FIN的连接，进行close。
    此时，recv/read已收到FIN的连接socket，会返回0。

为什么需要TIME_WAIT状态？
    假设最终的ACK丢失，server将重发FIN，client必须维护TCP状态信息以便可以重发最终的ACK，否则会发送RST，结果server认为发生错误。
    TCP实现必须可靠地终止连接的两个方向(全双工关闭)，client必须进入 TIME_WAIT 状态，因为client可能面 临重发最终ACK的情形。

为什么TIME_WAIT状态需要保持 2MSL 这么长的时间？
    如果 TIME_WAIT 状态保持时间不足够长(比如小于2MSL)，第一个连接就正常终止了。
    第二个拥有相同相关五元组的连接出现，而第一个连接的重复报文到达，干扰了第二个连接。
    TCP实现必须防止某个连接的重复报文在连接终止后出现，所以让TIME_WAIT状态保持时间足够长(2MSL)，连接相应方向上的TCP报文要么完全响应完毕，要么被 丢弃。
    建立第二个连接的时候，不会混淆。

TIME_WAIT和CLOSE_WAIT状态socket过多
    如果服务器出了异常，百分之八九十都是下面两种情况：
    1.服务器保持了大量TIME_WAIT状态
    2.服务器保持了大量CLOSE_WAIT状态，简单来说CLOSE_WAIT数目过大是由于被动关闭连接处理不当导致的。

一次完整的HTTP请求过程
    域名解析 --> 发起TCP的3次握手 --> 建立TCP连接后发起http请求 --> 服务器响应http请求，浏览器得到html代码 --> 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） --> 浏览器对页面进行渲染呈现给用户

长连接
    一、基于http协议的长连接
        在HTTP1.0和HTTP1.1协议中都有对长连接的支持。
        其中HTTP1.0需要在request中增加”Connection： keep-alive“ header才能够支持，而HTTP1.1默认支持.

        http1.0请求与服务端的交互过程:
        客户端发出带有包含一个header：”Connection： keep-alive“的请求
        服务端接收到这个请求后,根据http1.0和”Connection： keep-alive“判断出这是一个长连接,就会在response的header中也增加”Connection： keep-alive“，同时不会关闭已建立的tcp连接.
        客户端收到服务端的response后,发现其中包含”Connection： keep-alive“，就认为是一个长连接，不关闭这个连接。并用该连接再发送request.转到a)

    二、发心跳包。
        每隔几秒就发一个数据包过去    

TCP如何保证可靠传输？
    三次握手。
    将数据截断为合理的长度。
        应用数据被分割成 TCP 认为最适合发送的数据块（按字节编号，合理分片）
    超时重发。
        当 TCP 发出一个段后，它启动一个定时器，如果不能及时收到一个确认就重发
    对于收到的请求，给出确认响应
    校验出包有错，丢弃报文段，不给出响应
    对失序数据进行重新排序，然后才交给应用层
    对于重复数据，能够丢弃重复数据
    流量控制。
        TCP 连接的每一方都有固定大小的缓冲空间。
        TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据。
        这将防止较快主机致使较慢主机的缓冲区溢出。
    拥塞控制。
        当网络拥塞时，减少数据的发送。
