普通字符
    普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。
    这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。

非打印字符
    \cx	    匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
    \f	    匹配一个换页符。等价于 \x0c 和 \cL。
    \n	    匹配一个换行符。等价于 \x0a 和 \cJ。
    \r	    匹配一个回车符。等价于 \x0d 和 \cM。
    \s	    匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
    \S	    匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
    \t	    匹配一个制表符。等价于 \x09 和 \cI。
    \v	    匹配一个垂直制表符。等价于 \x0b 和 \cK。

特殊字符
    *	    匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
    +	    匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
    ?	    匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
    {n}	    n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
    {n,}	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}'   等价于 'o*'。
    {n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。
            例如，"o{1,3}" 将匹配 "fooooood" 中的前三个o。
                 'o{0,1}' 等价于 'o?'。
                 请注意在逗号和两个数之间不能有空格。

    通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪心"表达式转换为"非贪心"表达式或者最小匹配。

定位符
    ^	匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
    $	匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
    \b	匹配一个单词边界，即字与空格间的位置。
    \B	非单词边界匹配。

正则示例：
    var str = "http://www.runoob.com:80/html/html-tutorial.html";
    var patt1 = /(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/;
    arr = str.match(patt1);
    for (var i = 0; i < arr.length ; i++) {
        document.write(arr[i]);
        document.write("<br>");
    }

运行结果：
http://www.runoob.com:80/html/html-tutorial.html
http
www.runoob.com
:80
/html/html-tutorial.html


