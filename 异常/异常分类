异常整体分类：
    1）Java异常结构中定义有Throwable类。
        Exception和Error为Throwable的子类
    2）其中Exception表示由于网络故障、文件损坏、设备错误、用户输入非法情况导致的异常。
    3）而Error标识Java运行时环境出现的错误，例如：JVM内存耗尽。

unchecked exception（非检查异常）
    也称运行时异常（RuntimeException）
    比如常见的NullPointerException、IndexOutOfBoundsException。
    对于运行时异常，java编译器不要求必须进行异常捕获处理或者抛出声明，由程序员自行决定。

checked exception（检查异常）
    也称非运行时异常（运行时异常以外的异常就是非运行时异常），
    java编译器强制程序员必须进行捕获处理，比如常见的IOExeption和SQLException。
    对于非运行时异常如果不进行捕获或者抛出声明处理，编译都不会通过。

异常处理和设计的几个建议:
    1.只在必要使用异常的地方才使用异常，不要用异常去控制程序的流程
        谨慎地使用异常，异常捕获的代价非常高昂，异常使用过多会严重影响程序的性能。
        如果在程序中能够用if语句和Boolean变量来进行逻辑判断，那么尽量减少异常的使用，从而避免不必要的异常捕获和处理。

    2.切忌使用空catch块
        在捕获了异常之后什么都不做，相当于忽略了这个异常。
        千万不要使用空的catch块，空的catch块意味着你在程序中隐藏了错误和异常，并且很可能导致程序出现不可控的执行结果。
        如果你非常肯定捕获到的异常不会以任何方式对程序造成影响，最好用Log日志将该异常进行记录，以便日后方便更新和维护。

    3.检查异常和非检查异常的选择
        一旦你决定抛出异常，你就要决定抛出什么异常。这里面的主要问题就是抛出检查异常还是非检查异常。
        检查异常导致了太多的try…catch代码，可能有很多检查异常对开发人员来说是无法合理地进行处理的，比如SQLException，而开发人员却不得不去进行try…catch，这样就会导致经常出现这样一种情况：逻辑代码只有很少的几行，而进行异常捕获和处理的代码却有很多行。
        这样不仅导致逻辑代码阅读起来晦涩难懂，而且降低了程序的性能。
        我个人建议尽量避免检查异常的使用，如果确实该异常情况的出现很普遍，需要提醒调用者注意处理的话，就使用检查异常；否则使用非检查异常。
        因此，在一般情况下，我觉得尽量将检查异常转变为非检查异常交给上层处理。

    4.注意catch块的顺序
        不要把上层类的异常放在最前面的catch块。
        第二个catch的FileNotFoundException将永远不会被捕获到，因为FileNotFoundException是IOException的子类。

    5.不要将提供给用户看的信息放在异常信息里
        展示给用户错误提示信息最好不要跟程序混淆一起，比较好的方式是将所有错误提示信息放在一个配置文件中统一管理。

    6.避免多次在日志信息中记录同一个异常
        只在异常最开始发生的地方进行日志信息记录。很多情况下异常都是层层向上跑出的，如果在每次向上抛出的时候，都Log到日志系统中，则会导致无从查找异常发生的根源。

    7.异常处理尽量放在高层进行
        尽量将异常统一抛给上层调用者，由上层调用者统一之时如何进行处理。
        如果在每个出现异常的地方都直接进行处理，会导致程序异常处理流程混乱，不利于后期维护和异常错误排查。
        由上层统一进行处理会使得整个程序的流程清晰易懂。

    8.在finally中释放资源
        如果有使用文件读取、网络操作以及数据库操作等，记得在finally中释放资源。
        这样不仅会使得程序占用更少的资源，也会避免不必要的由于资源未释放而发生的异常情况。
