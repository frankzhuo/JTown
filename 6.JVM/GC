JVM常见垃圾回收算法
    1）标记-清除算法：
        标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。

    2）复制算法：
        将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。
        当一块内存用完了，将存活的对象全部转存到另外一块上面，然后再把之前使用过的内存空间一次清理掉。

    3）标记-整理算法：
        标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所一端移动，然后直接清理掉端边界以外的内存。

    4）分代收集算法：
        一般是把Java堆分为新生代和老年代，根据各个年代的特点采用最适当的收集算法。
        新生代都发现有大批对象死去，选用复制算法。
        老年代中因为对象存活率高，必须使用“标记-清理”或“标记-整理”算法来进行回收。

G1收集器
    简介：
        Garbage-First（G1，垃圾优先）收集器是服务类型的收集器，目标是多处理器机器、大内存机器。
        它高度符合垃圾收集暂停时间的目标，同时实现高吞吐量。
        Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器

    G1的内存划分方式：
        它是将堆内存划分为多个大小相等的 heap 区,每个heap区都是逻辑上连续的一段内存(virtual memory)。
        其中一部分区域被当成老一代收集器相同的角色(eden, survivor, old), 但每个角色的区域个数都不是固定的。
        这在内存使用上提供了更多的灵活性。

TODO:   复制算法的描述可能有问题