1 概述
给一个系统定位问题的时候，知识、经验是关键基础，数据是依据，工具是运用知识处理数据的手段。
经常使用适当的虚拟机监控和分析工具可以加速我们分析数据、定位解决问题的速度，但在学习工具前，也应当意识到工具永远都是知识技能的一层包装，并没有什么工具是“秘密武器”，不可能学会了就能包治百病。

2 JDK命令行工具（JDK安装的bin目录下）：
下面这些命令行工具java.exe以及javac.exe我们都很熟悉了，下面我们主要看看其他命令行工具的作用。

    JDK监控和故障处理工具
    jps：JVM Process Status Tool ,显示指定系统内所有的HotSpot虚拟机进程
    jstat: JVM Statistics Monitoring Tool ,用于收集HotSpot虚拟机各方面的运行数据。
    jinfo: Configuration Info forJava,显示虚拟机配置信息
    jmap: Memory Map for Java，生成虚拟机的内存转储快照（heapdump文件）
    jhat: JVM Heap Dump Browser ,用于分析heapdump文件，它会建立一个HTTP/HTML服务器，让用户可以在浏览器上查看分析结果
    jstack: Stack Trace forJava，显示虚拟机的线程快照

2.1 jps:虚拟机进程状况工具
    JDK的很多小工具的名字都参考了UNIX命令的命名方式，jps（JVM Process Status）是其中的典型。
    除了名字像UNIX的ps命令外，它的功能也和ps命令类似：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。
    虽然功能比较单一，但它是使用最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。

2.2 jstat:虚拟机统计信息监视工具
jstat（JVM Statistics Monitoring Tool） 使用于监视虚拟机各种运行状态信息的命令行工具。
它可以显示本地或者远程（需要远程主机提供RMI支持）虚拟机进程中的类信息、内存、垃圾收集、JIT编译等运行数据，在没有GUI，只提供了纯文本控制台环境的服务器上，它将是运行期间定位虚拟机性能问题的首选工具。
jstat主要工具选项：测试

2.3 jinfo：Java配置信息工具
jinfo（Configuration Info for Java） 的作用是实时地查看和调整虚拟机各项参数。
使用jps命令的-v可以查看虚拟机启动时显式指定的参数列表，但如果想知道未被显式指定的参数的系统默认值，可以使用jinfo的-flag选项进行查询，jinfo还可以使用-sysprops选项把虚拟机进程的System.getProperties()的内容打印出来。

2.4 jmap：Java内存映像工具
jmap（Memory Map for Java）命令用于生成堆转储快照。 
如果不使用jmap命令，要想获取Java堆转储，可以使用“-XX:+HeapDumpOnOutOfMemoryError”参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，Linux命令下可以通过kill -3发送进程退出信号也能拿到dump文件。
jmap的作用并不仅仅是为了获取dump文件，它还可以查询finalize执行队列、Java堆和永久代的详细信息，如空间使用率、当前使用的是哪种收集器等。
和jinfo一样，jmap有不少功能在Windows平台下也是受限制的，除了生成dump文件的-dump选项和用于查看每个类的实例、空间占用统计的-histo选项在所有操作系统都提供之外，其余选项都只能在Linux和Solaris系统下使用。

2.5 jstack：Java堆栈跟踪工具
jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照。
线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合.
生成线程快照的目的主要是定位线程长时间出现停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿的原因。
线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者在等待些什么资源。**

3 JDK可视化工具：
JConsole和VisualVM是两个功能强大的可视化工具。
从Java 5开始 引入了 JConsole，JConsole 是一个内置 Java 性能分析器。
您可以轻松地使用 JConsole（或者，它更高端的 “近亲” jvisualvm ）来监控 Java 应用程序性能和跟踪 Java 中的代码。（推荐使用升级版 JConsole 即 jvisualvm）
控制台启动或者直接双击可执行程序。
