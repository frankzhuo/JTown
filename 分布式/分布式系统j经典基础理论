分布式系统的目标
    提升系统的整体性能和吞吐量，另外还要尽量保证分布式系统的容错性（假如增加10台服务器才达到单机运行效果2倍左右的性能，那么这个分布式系统就根本没有存在的意义）。

分布式系统的设计思想
    中心化设计
        角色
            Master + Slave
            或者称为
            NameNode + DataNode
        角色职责
            “领导”通常负责分发任务并监督“干活的”，发现谁太闲了，就想发设法地给其安排新任务，确保没有一个“干活的”能够偷懒。
            如果“领导”发现某个“干活的”因为劳累过度而病倒了，则是不会考虑先尝试“医治”他的，而是一脚踢出去，然后把他的任务分给其他人。
            其中微服务架构 Kubernetes 就恰好采用了这一设计思路。
        问题：
            Master（NameNode）的单点问题
            Master能力问题（可以领导10个人高效工作并不意味着可以领导100个人高效工作，所以如果系统设计和实现得不好，问题就会卡在“领导”身上。）
        解决方案：
            1.普通版：Master主备设计
            2.加强版：自动选举法以自适应切换Master（逐步地去中心化设计）

    去中心化设计
        特征
            众生地位平等
                在去中心化的设计里，通常没有“领导”和“干活的”这两种角色的区分，大家的角色都是一样的，地位是平等的。
                全球互联网就是一个典型的去中心化的分布式系统，联网的任意节点设备宕机，都只会影响很小范围的功能。
        去中心化”不是不要中心，而是由节点来自由选择中心
            集群的成员会自发的举行“会议”选举新的“领导”主持工作。最典型的案例就是ZooKeeper及Go语言实现的Etcd
        问题：
            去中心化设计里最难解决的一个问题是 “脑裂”问题 ，这种情况的发生概率很低，但影响很大。
            脑裂指一个集群由于网络的故障，被分为至少两个彼此无法通信的单独集群，此时如果两个集群都各自工作，则可能会产生严重的数据冲突和错误。
            一般的设计思路是，当集群判断发生了脑裂问题时，规模较小的集群就“自杀”或者拒绝服务。

分布式与集群的区别是什么？
    分布式（业务拆分）：
        一个业务分拆多个子业务，部署在不同的服务器上
    集群（业务复制）： 
        同一个业务，部署在多个服务器上。
        比如之前做电商网站搭的redis集群以及solr集群都是属于将redis服务器提供的缓存服务以及solr服务器提供的搜索服务部署在多个服务器上以提高系统性能、并发量解决海量存储问题。

CAP原理：
    一致性（Consistence）：
        所有节点访问同一份最新的数据副本 
    可用性（Availability）：
        每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据 
    分区容错性（Partition tolerance）:
        分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。

CAP适用场景：
    CAP仅适用于原子读写的NOSQL场景中，并不适合数据库系统。
    现在的分布式系统具有更多特性比如扩展性、可用性等等，在进行系统设计和开发时，我们不应该仅仅局限在CAP问题上。

CAP3选2？
    不是所谓的3选2，而是2选1：
        当发生网络分区(P)的时候，如果我们要继续服务，那么强一致性(C)和可用性(A)只能2选1。
        也就是说当网络分区(P)是前提，决定了P之后才有C和A的选择。
        也就是说分区容错性（Partition tolerance）我们是必须要实现的。
        一句话总结：P是基础，C和A二选一。
    我们往往为了可用性和分区容错性，忍痛放弃强一致支持，转而追求最终一致性。
    大部分业务场景下，我们是可以接受短暂的不一致的。
    即：CAP中，P是前提，我们必须保证（加强）A，而弱化C。

BASE理论三要素
    Basically Available（基本可用）
        分布式系统在出现不可预知故障的时候，允许损失部分可用性。
        但是，这绝不等价于系统不可用。
        比如，
            响应时间上的损失:
                正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒
            系统功能上的损失：
                正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，
                由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面
    Soft-state（软状态）
        软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性。
        即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时
    Eventually Consistent（最终一致性） 
        最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。
        因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。

Base理论总结
    BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，它大大降低了我们对系统的要求。

BASE理论的核心思想：
    即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。
    也就是牺牲数据的一致性来满足系统的高可用性，系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。
    针对数据库领域，BASE思想的主要实现是对业务数据进行拆分，让不同的数据分布在不同的机器上，以提升系统的可用性，当前主要有以下两种做法：
        按功能划分数据库
        分片（如开源的Mycat、Amoeba等）。
    由于拆分后会涉及分布式事务问题，所以eBay在该BASE论文中提到了如何用最终一致性的思路来实现高性能的分布式事务。















