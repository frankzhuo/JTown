在Java中,为了保证多线程读写数据时保证数据的一致性,可以采用两种方式：
　 1）使用synchronized关键字
　 2）使用volatile关键字：用一句话概括volatile,它能够使变量在值发生改变时能尽快地让其他线程知道。

volatile:
    作为指令关键字，确保本条指令不会因编译器的优化而省略，修饰变量，保证变量每次都是从内存中重新读取。

volatile和synchronized两者的区别：
    1）volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取；synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.
    2）volatile仅能使用在变量级别,synchronized则可以使用在变量,方法.
    3）volatile仅能实现变量的修改可见性,而synchronized则可以保证变量的修改可见性和原子性.
    4）volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞.

如何确保线程安全？
    同步
    使用原子类(atomic concurrent classes)，
    实现并发锁，
    使用volatile关键字，
    使用不变类和线程安全类。

----------------------------------------------------------------------------------------------------------------------------------
synchronized和ReentrantLock的区别
    synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。
    既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量。
    ReentrantLock比synchronized的扩展性体现在几点上： 
        （1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 
        （2）ReentrantLock可以获取各种锁的信息 
        （3）ReentrantLock可以灵活地实现多路通知 
    另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的是对象头中mark word.


线程同步的两种实现方式对比：
    synchronized关键字
        最经典的实现方式，功能较简单粗暴
    ReentrantLock重入锁 
        可完全替代synchronized关键字
        相对于synchronized关键字，新增加了功能：中断响应、锁申请等待限时、公平锁。
        可在代码中显式控制加锁和释放锁。

        Java代码：

            import java.util.concurrent.locks.ReentrantLock;

            public class ReentrantLockTest implements Runnable{
                public static ReentrantLock lock = new ReentrantLock();
                public static int i = 0;

                @Override
                public void run() {
                    for (int j = 0; j < 10000; j++) {
                        lock.lock();  //加锁
                        try {
                            i++;
                        } finally {
                            lock.unlock(); //解锁
                        }
                    }
                }

                public static void main(String[] args) throws InterruptedException {
                    ReentrantLockTest test = new ReentrantLockTest();
                    Thread t1 = new Thread(test);
                    Thread t2 = new Thread(test);
                    t1.start();t2.start();
                    t1.join(); t2.join(); // main线程会等待t1和t2都运行完，再执行以后的流程
                    System.err.println(i);
                }
            }


            1.中断响应
                对于synchronized块来说，要么获取到锁执行，要么持续等待。
                而重入锁的中断响应功能就合理地避免了这样的情况。
                比如，一个正在等待获取锁的线程被“告知”无须继续等待下去，就可以停止工作了。
                直接上代码，来演示使用重入锁如何解决死锁：

                    import java.util.concurrent.locks.ReentrantLock;

                    public class KillDeadlock implements Runnable{
                        public static ReentrantLock lock1 = new ReentrantLock();
                        public static ReentrantLock lock2 = new ReentrantLock();
                        int lock;

                        public KillDeadlock(int lock) {
                            this.lock = lock;
                        }

                        @Override
                        public void run() {
                            try {
                                if (lock == 1) {
                                    lock1.lockInterruptibly();  // 以可以响应中断的方式加锁
                                    try {
                                        Thread.sleep(500);
                                    } catch (InterruptedException e) {}
                                    lock2.lockInterruptibly();
                                } else {
                                    lock2.lockInterruptibly();  // 以可以响应中断的方式加锁
                                    try {
                                        Thread.sleep(500);
                                    } catch (InterruptedException e) {}
                                    lock1.lockInterruptibly();
                                }
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            } finally {
                                if (lock1.isHeldByCurrentThread()) lock1.unlock();  // 注意判断方式
                                if (lock2.isHeldByCurrentThread()) lock2.unlock();
                                System.err.println(Thread.currentThread().getId() + "退出！");
                            }
                        }

                        public static void main(String[] args) throws InterruptedException {
                            KillDeadlock deadLock1 = new KillDeadlock(1);
                            KillDeadlock deadLock2 = new KillDeadlock(2);
                            Thread t1 = new Thread(deadLock1);
                            Thread t2 = new Thread(deadLock2);
                            t1.start();t2.start();
                            Thread.sleep(1000);
                            t2.interrupt(); // ③
                        }
                    }

                t1、t2线程开始运行时，会分别持有lock1和lock2而请求lock2和lock1，这样就发生了死锁。
                但是，在③处给t2线程状态标记为中断后，持有重入锁lock2的线程t2会响应中断，并不再继续等待lock1，同时释放了其原本持有的lock2，
                这样t1获取到了lock2，正常执行完成。t2也会退出，但只是释放了资源并没有完成工作。                    

            2.锁申请等待限时
                可以使用 tryLock()或者tryLock(long timeout, TimeUtil unit) 方法进行一次限时的锁等待。
                前者不带参数，这时线程尝试获取锁，如果获取到锁则继续执行，如果锁被其他线程持有，则立即返回false，也就是不会使当前线程等待，所以不会产生死锁。 
                后者带有参数，表示在指定时长内获取到锁则继续执行，如果等待指定时长后还没有获取到锁则返回false。

                    import java.util.concurrent.TimeUnit;
                    import java.util.concurrent.locks.ReentrantLock;

                    public class TryLockTest implements Runnable{
                        public static ReentrantLock lock = new ReentrantLock();

                        @Override
                        public void run() {
                            try {
                                if (lock.tryLock(1, TimeUnit.SECONDS)) { // 等待1秒
                                    Thread.sleep(2000);  //休眠2秒
                                } else {
                                    System.err.println(Thread.currentThread().getName() + "获取锁失败！");
                                }
                            } catch (Exception e) {
                                if (lock.isHeldByCurrentThread()) lock.unlock();
                            }
                        }

                        public static void main(String[] args) throws InterruptedException {
                            TryLockTest test = new TryLockTest();
                            Thread t1 = new Thread(test); t1.setName("线程1");
                            Thread t2 = new Thread(test); t1.setName("线程2");
                            t1.start();t2.start();
                        }
                    }
                    /**
                    * 运行结果:
                    * 线程2获取锁失败！
                    */ 

                上述示例中，t1先获取到锁，并休眠2秒，这时t2开始等待，等待1秒后依然没有获取到锁，就不再继续等待，而是打印出日志。符合预期结果。

            3.公平锁
                所谓公平锁，就是按照时间先后顺序，使先等待的线程先得到锁。
                而且，公平锁不会产生饥饿锁，也就是只要排队等待，最终能等待到获取锁的机会。
                使用重入锁（ReentrantLock，默认是非公平锁）创建公平锁：

                    public ReentrantLock(boolean fair) {
                        sync = fair ? new FairSync() : new NonfairSync();
                    }


                演示代码：
                    import java.util.concurrent.locks.ReentrantLock;

                    public class FairLockTest implements Runnable{
                        public static ReentrantLock lock = new ReentrantLock(true);

                        @Override
                        public void run() {
                            while (true) {
                                try {
                                    lock.lock();
                                    System.err.println(Thread.currentThread().getName() + "获取到了锁！");
                                } finally {
                                    lock.unlock();
                                }
                            }
                        }

                        public static void main(String[] args) throws InterruptedException {
                            FairLockTest test = new FairLockTest();
                            Thread t1 = new Thread(test, "线程1");
                            Thread t2 = new Thread(test, "线程2");
                            t1.start();t2.start();
                        }
                    }
                    /**
                    * 运行结果:
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * 线程1获取到了锁！
                    * 线程2获取到了锁！
                    * ......（上边是截取的一段）
                    */

                可以发现，t1和t2交替获取到锁。如果是非公平锁，会发生t1运行了许多遍后t2才开始运行的情况。

